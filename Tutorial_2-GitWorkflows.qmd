---
title: "Tutorial-Git Workflows"
---

## Git Workflows

### The most basic workflow

This is the workflow that should only be used for solo experimentation phases it is frowned upon, and Jenny Bryan recommends going straight to collaborative workflows as it is in that setting that the most benefit is seen from the extra learning required in the use of Git and Github. However, following this talk by Colin Gillespie—[**Getting the Most Out of Git - posit::conf(2023)**](https://youtu.be/RwLxCk6bDnY?si=IZUIazkIjsuoPsfi)**—**I will recommend this basic workflow in a small number of circumstances and it offers a nice stepping stone to more complex workflows.

Following Colin Gillespie's advice the situations in which the basic workflow or "standard process" is suitable is when you have code or documents that do not have importance for many people other than yourself, for example, when you have to produce one off code for slides, or when you are just at the start of a project.

One of the most important things that Git brings to version control are the branches and this standard process or workflow ignores branches—we will cover them soon. For the moment, we can largely ignore them except to be aware that all git repositories or repos have at least one branch—or perhaps to take the analogy to its conclusion the central trunk, nowadays, that is known as the **main** branch. This is the branch that keeps track of all the changes that you make and represents the current canonical version of your code or document, and it contains a historical list of all the changes that have happened to your code and documents over time.

In the most basic workflow you just keep this branch and commit and push to it.
